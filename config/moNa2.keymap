#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <12 11>;
        };

        SelectALL {
            bindings = <&kp LC(A)>;
            key-positions = <11 13>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <13 12>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <3 2>;
        };

        ShiftTab {
            bindings = <&kp LS(TAB)>;
            key-positions = <1 2>;
        };

        AltTab {
            bindings = <&kp LA(TAB)>;
            key-positions = <4 3>;
        };

        CtrlTab {
            bindings = <&kp LC(TAB)>;
            key-positions = <24 25>;
        };

        SftCtlTab {
            bindings = <&kp LS(LC(TAB))>;
            key-positions = <23 24>;
        };

        ScreenShot {
            bindings = <&kp LG(LS(S))>;
            key-positions = <10 11>;
        };

        changeLang {
            bindings = <&kp LC(SPACE)>;
            key-positions = <2 12>;
        };

        DblQuotation {
            bindings = <&kp DQT>;
            key-positions = <19 20>;
        };

        SglQuote {
            bindings = <&kp SQT>;
            key-positions = <20 21>;
        };

        Comma {
            bindings = <&kp COMMA>;
            key-positions = <30 31>;
        };

        Dot {
            bindings = <&kp DOT>;
            key-positions = <32 31>;
        };

        Lpar {
            bindings = <&kp LPAR>;
            key-positions = <14 13>;
        };

        Rpar {
            bindings = <&kp RPAR>;
            key-positions = <17 18>;
        };

        Lbkt {
            bindings = <&kp LBKT>;
            key-positions = <4 3>;
        };

        Rbkt {
            bindings = <&kp RBKT>;
            key-positions = <5 6>;
        };

        Lbrc {
            bindings = <&kp LBRC>;
            key-positions = <25 26>;
        };

        Rbrc {
            bindings = <&kp RBRC>;
            key-positions = <29 30>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <12 24>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LALT Q    &kp W     &kp E     &kp R               &kp T                                       &kp Y            &kp U  &kp I     &kp O     &mt RALT P
&mt LCTRL A   &kp S     &kp D     &kp F               &kp G                     &kp UNDERSCORE    &kp H            &kp J  &kp K     &kp L     &mt RCTRL SEMI
&mt LSHIFT Z  &kp X     &kp C     &kp V               &kp B      &lt 4 CAPS     &kp SINGLE_QUOTE  &kp N            &kp M  &mkp MB1  &mkp MB2  &mt RSHIFT SLASH
&kp LCTRL     &kp LGUI  &kp LALT  &mt LEFT_SHIFT ESC  &lt 3 TAB  &lt 2 SPACE    &mt RALT ENTER    &lt 1 BACKSPACE                             &lt 3 DEL
            >;

            sensor-bindings =
                <&scroll_up_down>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        layer_1 {
            bindings = <
&kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT                           &kp CARET     &kp AMPS      &kp ASTRK     &kp MINUS     &kp DQT
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5             &kp TILDE  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F11    &kp F12    &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
&trans        &trans        &trans        &trans        &trans        &trans     &trans     &trans                                                  &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        L2Sym {
            bindings = <
&kp MINUS  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                           &kp GRAVE  &kp LBKT  &kp RBKT  &kp BSLH  &kp PIPE
&kp SLASH  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK               &trans  &kp TILDE  &kp LPAR  &kp RPAR  &kp LT    &kp GT
&kp DOT    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_N0     &kp EQUAL    &trans  &trans     &kp LBRC  &kp RBRC  &kp BSLH  &kp PIPE
&trans     &trans           &trans           &trans           &trans        &trans       &trans  &trans                                   &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        L3Num {
            bindings = <
&kp ESCAPE  &kp HOME        &kp UP_ARROW    &kp END          &trans                          &kp KP_MULTIPLY  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_DIVIDE
&trans      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans            &kp KP_NUM    &kp KP_PLUS      &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS
&trans      &kp PG_UP       &kp PAGE_UP     &kp PG_DN        &trans  &trans    &trans        &kp KP_EQUAL     &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT
&trans      &trans          &trans          &trans           &trans  &trans    &kp KP_ENTER  &kp KP_N0                                         &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        FUNC {
            bindings = <
&to 5   &trans  &trans  &trans  &trans                          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans            &out OUT_BLE  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &out OUT_USB  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans                                                  &bt BT_CLR_ALL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        Game {
            bindings = <
&kp NUMBER_1  &kp Q  &kp W  &kp E      &kp R                            &kp T    &mkp MB4  &trans    &mkp MB5  &kp BACKSPACE
&kp NUMBER_3  &kp A  &kp S  &kp D      &kp F                   &to 0    &kp H    &mkp MB1  &mkp MB3  &mkp MB2  &kp ENTER
&kp NUMBER_2  &kp X  &kp G  &kp V      &kp Z      &kp ESC      &trans   &kp Y    &trans    &mkp MB1  &mkp MB2  &kp SLASH
&kp NUMBER_4  &kp M  &mo 6  &kp LCTRL  &kp LSHFT  &kp SPACE    &kp TAB  &kp ESC                                &mkp MB2
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        Game2 {
            bindings = <
&kp ESC  &trans  &trans  &kp T   &kp ENTER                    &trans  &mkp MB4  &trans    &mkp MB5  &trans
&kp TAB  &trans  &trans  &kp I   &kp SLASH            &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&kp H    &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans    &mkp MB1  &mkp MB2  &trans
&kp Y    &trans  &trans  &trans  &trans     &trans    &trans  &trans                                &mkp MB2
            >;

            sensor-bindings = <&scroll_up_down>;
        };
    };
};
